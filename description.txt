Project Description: Offline Top-Down Rogue-like Dungeon Game

Objective: Create a single-player, top-down rogue-like dungeon crawler that runs entirely in a web browser. The game must be fully functional offline—no server-side processing (like Apache, PHP, or a database) is required. All assets and logic must be contained within the project files.

Core Technical Requirements:

1. Platform: Pure HTML5, CSS, and JavaScript (ES6+).
2. Rendering: Use the HTML5 <canvas> element for all game graphics.
3. Offline-First: The game must be playable by simply opening the index.html file in a browser or from a local folder. All assets (images, sounds) must be bundled and loaded locally.
4. Sprite Animation: All characters, enemies, and effects must use animated sprite sheets.

---

1. Core Gameplay Features

· Genre: Top-down, tile-based rogue-like.
· Procedural Generation: Dungeons (rooms, corridors, item/enemy placement) must be randomly generated for each playthrough.
· Permadeath: When the player's character dies, they restart from the beginning with a newly generated dungeon.
· Turn-Based Movement: The game should use a turn-based system. When the player moves or acts, all enemies and entities in the dungeon also take their turn.
· Simple Combat: Melee-based combat where the player attacks by moving into enemies.
· Loot & Progression: Discover weapons, armor, and consumables (health potions) that persist for the current run.

---

2. Technical Specifications & Art Style

· Visual Style: Pixel art.
· Canvas Resolution: A fixed resolution, e.g., 640x360 pixels, scaled up to fit the browser window while maintaining crisp pixels.
· Tile Size: e.g., 16x16 or 32x32 pixels.

Sprite Sheets Required:

You will need to provide or the developer will create animated sprite sheets for the following. Each animation should have multiple frames (e.g., 4 frames for a walk cycle).

· Player Character:
  · Idle (facing up, down, left, right)
  · Walk Cycle (up, down, left, right)
  · Attack Animation (up, down, left, right) - Optional but recommended
  · Death Animation
· Enemies (e.g., Slime, Skeleton, Bat):
  · Idle
  · Move
  · Attack
  · Death
· Environment & Items:
  · Tileset for walls, floors, doors.
  · Animated sprites for torches, water, lava.
  · Icons for weapons, armor, potions.

---

3. Key Functionality to Implement

A. Game Engine & Loop (in JavaScript)

· Create a main game loop using requestAnimationFrame.
· Implement a state manager (e.g., STATE_LOADING, STATE_PLAYING, STATE_GAMEOVER).
· Handle keyboard input for movement (Arrow Keys or WASD) and actions (Spacebar for using potions, 'E' to interact).

B. Dungeon Generation

· Develop an algorithm (e.g., based on "rooms and corridors") to create a random, connected dungeon map on a 2D grid.
· Data should be stored in a simple 2D array representing the map.

C. Sprite & Animation System

· Create a Sprite class that loads a sprite sheet image.
· Create an Animation class that handles frame timing, looping, and switching between animations (e.g., from "walk_down" to "idle_down").
· The game loop should update and draw the current frame of each entity's active animation.

D. Game World & Entities

· Entity-Component-System (ECS) Lite: Use a simple class hierarchy for game objects.
  · Entity (base class with position, sprite)
  · Player (extends Entity, adds health, inventory)
  · Enemy (extends Entity, adds AI logic, attack power)
  · Item (extends Entity, adds type and effect)
· Collision Detection: Simple grid-based or AABB (Axis-Aligned Bounding Box) collision for walls, doors, and enemies.

E. Turn Management

· The game waits for player input. Once the player moves or acts, process the "turn":
  1. Update player state.
  2. Iterate through all enemies and execute their AI (move towards player, attack if adjacent).
  3. Check for player/enemy deaths.
  4. Return control to the player.

---

4. Project Structure & Delivery

The final deliverable should be a single folder with this structure:

```
/offline-dungeon-game
│
├── index.html          # Main file, contains the <canvas> element
├── css/
│   └── style.css       # Basic styling to center the canvas
├── js/
│   ├── game.js         # Main game loop and initialization
│   ├── dungeon.js      # Procedural generation logic
│   ├── sprite.js       # Sprite and Animation classes
│   ├── entities/       # Folder for Player, Enemy, Item classes
│   │   ├── player.js
│   │   ├── enemy.js
│   │   └── item.js
│   └── utils.js        # Helper functions (keyboard input, etc.)
└── assets/
    ├── sprites/
    │   ├── player.png
    │   ├── slime.png
    │   ├── tiles.png
    │   └── ...
    ├── sounds/         # Optional
    │   └── ...
    └── fonts/          # Optional
        └── ...
```

Summary for the Developer's Quick Start

"Please build a top-down, turn-based rogue-like game in pure JavaScript/HTML5 Canvas. It needs to run offline by opening index.html. The core features are: procedurally generated dungeons, permadeath, and animated pixel-art sprites for the player and enemies. The game loop should be turn-based, where every player action advances the game state. All code and assets will be local. Please structure the code in a modular way within a single project folder."

This description gives your developer a comprehensive blueprint, setting clear expectations for the scope, technology, and final deliverable.